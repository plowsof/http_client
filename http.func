function http_init()
{
	set _print_resp_wait 0
	set _http_downloading 0
	//get <mapname> only quicker
	//serverstatus 5.135.46.179:28916
	//only our onchange print is shown
	sp_sc_on_change _sp_cl_print_data print_response
	sp_sc_on_change _sp_cl_info_state onch_state
	sp_sc_on_change cl_downloading onch_download

	sp_sc_func_alias http_print http_print
	sp_sc_func_alias http_sp2curl http_sp2curl

	sp_sc_func_alias quick quick
}

// 1-Not connected
// 2-Attempting to connect to a server
// 4-(Re)connecting to a server
// 7-Loading map
// 8-Spawned into the map
function onch_state(~cvar)
{
	sp_sc_cvar_copy ~state $~cvar
	//http_print $~cvar has changed to $~state
	sp_sc_flow_if number cvar ~state == val "7"
	{
		zero cl_downloading
		http_print "began loading map!"
		sp_sc_cvar_list _sp_cl_info_server
		//check the mapname early from serverstatus
		zero _sp_cl_print_data 
		set _print_resp_wait 1
		set _sp_cl_print 3
		echo "do status"
		serverstatus $_sp_cl_info_server
	}
	else
	{
		sp_sc_flow_if number cvar ~state == val "8"
		{
			//we spawned in game, trigger cleanup()
			set ~l ""
			sp_sc_cvar_save http_done ~l
			set http_counter_finished 1
			set http_counter_exists 5000
		}
	}
}


function print_response(~data)
{
	echo "IN"
	sp_sc_cvar_copy ~parse_me $~data
	//ignore when we zero it
	sp_sc_flow_if text cvar ~parse_me != val ""
	{
		sp_sc_flow_if number cvar _print_resp_wait == val 1
		{
			//maybe 'busy' is a better name.. 0 when finished?
			set _print_resp_wait 0
			sp_sc_flow_if number cvar http_busy == val 0
			{
				echo "not busy downloading"
				//we're waiting for a response
				sp_sc_cvar_replace ~noquote ~parse_me %22: 
				sp_sc_func_exec parse_get_map #~noquote
			}
			else
			{
				http_print "We're busy downloading a file: already"
			}
		}
	}
}

function parse_get_map(*)
{
	//complains sometimes about multiple args e.g. an extra " somewhere
	set ~data #~1
	set ~parse #~data
	//sset ~msg "%03%03Parse this:%02" #~parse
	//sp_sc_cvar_unescape ~msg ~msg
	//echo #~msg
	sp_sc_cvar_substr ~char ~parse 0 1
	sp_sc_flow_if text cvar ~char == val "\"
	{
		set _sp_cl_print 1
		//it's serverinfo, split + find mapname
		sp_sc_cvar_split ~serverinfo "\" ~parse
		set ~counter 1
		sp_sc_flow_while number cvar ~counter <= cvar ~serverinfo_0
		{
			sp_sc_flow_if text cvar ~serverinfo_$~counter == val "mapname"
			{
				set ~tmp $~counter;add ~tmp 1
				sp_sc_cvar_copy ~mapname ~serverinfo_$~tmp
				//set ~serverinfo_0 0, or:
				add ~serverinfo_0 -$~serverinfo_0
			}
			add ~counter 1
		}
		sp_sc_func_exec parse_find_map $~mapname
	}
}

function parse_find_map(~mapname)
{
	echo Looking for $~mapname
	sp_sc_cvar_sset ~dir "maps/" $~mapname ".bsp"
	sp_sc_file_find ~ls $~dir pak filesystem file recursive
	sp_sc_flow_if number cvar ~ls_0 == val 0
	{
		http_print We do not have: $~dir
		//let the onch_download func handle it
		//sp_sc_cvar_sset ~path "maps/" $~mapname ".bsp"
		//set cl_download_filename $~path
		//zero cl_downloading; set cl_downloading "Downloading File"
		//new map file list
		sp_sc_cvar_random_int ~rand 1 1000000
		sp_sc_cvar_save http_mapname_$~rand ~mapname
		set http_counter_exists 0
		sp_sc_func_exec filelist_exists_loop
	}
	else
	{
		http_print We have: $~dir
	}
}

function filelist_exists_loop(*)
{
	sp_sc_flow_if number cvar http_counter_exists < val 5000
	{
		sp_sc_cvar_list http_counter_exists
		add http_counter_exists 250
		sp_sc_func_exec filelist_exists
		sset ~cmd sp_sc_func_exec filelist_exists_loop #~1
		sp_sc_timer 250 #~cmd
	}
}
function filelist_exists(*)
{
	sp_sc_cvar_sset ~f "sofplus/data/http_flist_exists"
	sp_sc_file_find ~ls $~f file 
	sp_sc_flow_if number cvar ~ls_0 == val 1
	{
		disconnect
		//stop loop
		set http_counter_exists 5000
		set http_counter_make 0
		set http_counter_finished 0
		sp_sc_func_exec filelist_finished_loop aeo<3
		//"user/sofplus/addons/http_filelist_created.func"
	}
	else
	{
		echo "Debug: Flist:not existing"
	}
}

function filelist_finished_loop(*)
{
	sp_sc_flow_if number cvar http_counter_finished == val 0
	{
		sp_sc_func_exec filelist_finished
		sset ~cmd sp_sc_func_exec filelist_finished_loop #~1
		sp_sc_timer 250 #~cmd
	}
}

function filelist_finished(*)
{
	sp_sc_cvar_sset ~f "sofplus/data/http_flist_finished"
	sp_sc_file_find ~ls $~f file 
	sp_sc_flow_if number cvar ~ls_0 == val 1
	{
		reconnect
		//stop loop
		set http_counter_finished 1
	}
}

function onch_download(~cvar)
{
	sp_sc_cvar_copy ~x $~cvar
	sp_sc_flow_if text cvar ~x == val "Downloading File"
	{
		sp_sc_flow_if number cvar http_busy == val "0"
		{
			http_sp2curl $cl_download_filename
		}
	}
}

function http_sp2curl(~file)
{
	sp_sc_cvar_list ~file
	set ~dir #~file
	sp_sc_cvar_random_int ~rand 1 1000000
	sp_sc_cvar_sset ~saveas "http_tmp_" #~rand
	sp_sc_cvar_save $~saveas ~dir
	set http_counter_exists 0
	sp_sc_func_exec filelist_exists_loop aeo<3
	//user/sofplus/data/http_flist_exists
}

function http_print(~str,*)
{
	sset ~out "%03HTTP-DL: %01" $~str
	sp_sc_cvar_unescape ~out ~out
	set ~count 1
	sp_sc_flow_while number cvar ~count <= val #~0
	{
		sp_sc_cvar_copy ~arg ~$~count
		sp_sc_cvar_append ~out " " $~arg
		add ~count 1 
	}
	echo #~out
}

function http_exists(~fname)
{
	sp_sc_file_find ~exists $~fname pak filesystem file recursive
	sp_sc_flow_if number cvar ~exists_0 == val 0
	{
		//return the answer
		set __http_exists__ 0
	}
	else
	{
		set __http_exists__ 1
	}
}

function quick()
{
	//sp_sc_func_exec parse_find_map "dm/coop_pitia_house-=final=-"
	sp_sc_func_exec parse_find_map "dm/aztec2"
}
